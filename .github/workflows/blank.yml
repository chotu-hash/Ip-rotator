name: Cloudflared Tunnel Workflow

on:
  workflow_dispatch: # Allows you to run this manually from the Actions tab

jobs:
  run-tunnel:
    runs-on: ubuntu-latest

    env:
      # -------------------------
      # CONFIG
      # -------------------------
      CLOUDFLARED_DIR: "/home/runner/.cloudflared"
      CREDS_SRC: "creds.json"        # Local temp file for creds from secret
      SOCKS_PORT: 1080
      MICRO_DIR: "/tmp/microsocks"
      MICRO_BIN: "/usr/local/bin/microsocks"
      MICRO_LOG: "/tmp/microsocks.log"
      TUNNEL_LOG: "/tmp/cloudflared_tunnel.log"

    steps:
    - name: 0) Sanity checks
      shell: bash
      run: |
        echo "Running as user: $(whoami)"
        if [ -z "${{ secrets.CF_CREDS_JSON }}" ]; then
          echo "::error::CF_CREDS_JSON secret is not set."
          exit 1
        fi
        if [ -z "${{ secrets.CF_CONFIG_YML }}" ]; then
          echo "::error::CF_CONFIG_YML secret is not set."
          exit 1
        fi
        echo "Sanity checks passed."

    - name: 1) Cleanup previous runs
      shell: bash
      run: |
        echo "Cleaning up previous runs..."
        
        echo "Killing old microsocks processes..."
        pkill microsocks 2>/dev/null || true
        
        echo "Killing old cloudflared processes..."
        pkill cloudflared 2>/dev/null || true
        
        echo "Removing old microsocks clone (${{ env.MICRO_DIR }})..."
        sudo rm -rf "${{ env.MICRO_DIR }}"
        
        echo "Removing old logs..."
        sudo rm -f "${{ env.MICRO_LOG }}" "${{ env.TUNNEL_LOG }}"
        
        echo "Cleanup complete."

    - name: 2) Setup cloudflared directory and copy files
      shell: bash
      env:
        SECRET_CREDS: ${{ secrets.CF_CREDS_JSON }}
        SECRET_CONFIG: ${{ secrets.CF_CONFIG_YML }}
      run: |
        echo "Setting up ${{ env.CLOUDFLARED_DIR }} and copying credentials/config"
        
        # --- DEBUG: PRINTING SECRETS ---
        # WARNING: This exposes secrets in your logs. Remove after debugging.
        echo "--- DEBUG: CF_CREDS_JSON ---"
        echo "$SECRET_CREDS"
        echo "----------------------------"
        
        echo "--- DEBUG: CF_CONFIG_YML ---"
        echo "$SECRET_CONFIG"
        echo "----------------------------"
        # --- END DEBUG ---

        # Create temp creds file from secret
        # Using printf is safer than echo for multi-line strings
        printf "%s\n" "$SECRET_CREDS" > "${{ env.CREDS_SRC }}"
        # Create temp config file from secret
        printf "%s\n" "$SECRET_CONFIG" > "config.yml.temp"
        
        sudo mkdir -p "${{ env.CLOUDFLARED_DIR }}"
        sudo cp -f "${{ env.CREDS_SRC }}" "${{ env.CLOUDFLARED_DIR }}/creds.json"
        sudo cp -f "config.yml.temp" "${{ env.CLOUDFLARED_DIR }}/config.yml"
        
        # Set ownership to the runner user
        sudo chown -R "$(whoami)":"$(whoami)" "${{ env.CLOUDFLARED_DIR }}"
        
        # Securely remove the temp files
        rm -f "${{ env.CREDS_SRC }}"
        rm -f "config.yml.temp"

        # --- DEBUG: PRINTING FINAL FILES ---
        # WARNING: This exposes secrets in your logs. Remove after debugging.
        echo "--- DEBUG: Content of /home/runner/.cloudflared/creds.json ---"
        cat "${{ env.CLOUDFLARED_DIR }}/creds.json"
        echo "-------------------------------------------------------------"
        
        echo "--- DEBUG: Content of /home/runner/.cloudflared/config.yml ---"
        cat "${{ env.CLOUDFLARED_DIR }}/config.yml"
        echo "--------------------------------------------------------------"
        # --- END DEBUG ---

    - name: 3) Install dependencies
      shell: bash
      run: |
        echo "Installing packages (git, make, build-essential, net-tools, curl, lsof)"
        sudo apt-get update -y
        sudo apt-get install -y git build-essential net-tools curl lsof

    - name: 4) Build microsocks
      shell: bash
      run: |
        echo "Cloning and building microsocks"
        git clone https://github.com/rofl0r/microsocks.git "${{ env.MICRO_DIR }}"
        cd "${{ env.MICRO_DIR }}"
        make
        echo "Installing microsocks to ${{ env.MICRO_BIN }}"
        sudo cp -f microsocks "${{ env.MICRO_BIN }}"
        sudo chmod +x "${{ env.MICRO_BIN }}"
        cd "$GITHUB_WORKSPACE"

    - name: 5) Start microsocks
      shell: bash
      run: |
        echo "Preparing log ${{ env.MICRO_LOG }}"
        sudo mkdir -p "$(dirname "${{ env.MICRO_LOG }}")"
        sudo touch "${{ env.MICRO_LOG }}"
        sudo chown "$(whoami)":"$(whoami)" "${{ env.MICRO_LOG }}"
        
        echo "Starting microsocks on 127.0.0.1:${{ env.SOCKS_PORT }}"
        nohup "${{ env.MICRO_BIN }}" -i 127.0.0.1 -p "${{ env.SOCKS_PORT }}" > "${{ env.MICRO_LOG }}" 2>&1 &
        sleep 2
        
        if pgrep microsocks >/dev/null 2>&1; then
          echo "microsocks started (PID $(pgrep microsocks))"
        else
          echo "::error::microsocks failed to start; printing full log:"
          cat "${{ env.MICRO_LOG }}"
          exit 1
        fi

    - name: 6) Install cloudflared
      shell: bash
      run: |
        echo "Installing cloudflared"
        curl -fsSL https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64 -o /tmp/cloudflared
        sudo mv /tmp/cloudflared /usr/local/bin/cloudflared
        sudo chmod +x /usr/local/bin/cloudflared
        cloudflared --version

    - name: 7) Start cloudflared tunnel
      shell: bash
      run: |
        echo "Preparing tunnel log ${{ env.TUNNEL_LOG }}"
        sudo touch "${{ env.TUNNEL_LOG }}"
        sudo chown "$(whoami)":"$(whoami)" "${{ env.TUNNEL_LOG }}"
        
        echo "Starting cloudflared tunnel using config.yml"
        # Note: We use the config file from the runner's home dir
        nohup cloudflared --config "${{ env.CLOUDFLARED_DIR }}/config.yml" tunnel run > "${{ env.TUNNEL_LOG }}" 2>&1 &
        
        echo "Waiting for tunnel to establish..."
        sleep 6
        
        if pgrep cloudflared >/dev/null 2>&1; then
          echo "cloudflared started (PID $(pgrep cloudflared))"
        else
          echo "::error::cloudflared failed to start; printing full log:"
          cat "${{ env.TUNNEL_LOG }}"
          exit 1
        fi

    - name: 8) Quick test microsocks
      shell: bash
      run: |
        echo "Testing local SOCKS5 proxy"
        IP_JSON=$(curl -s --max-time 10 --socks5-hostname 127.0.0.1:"${{ env.SOCKS_PORT }}" https://www.cloudflare.com/cdn-cgi/trace/)
        
        if [ $? -eq 0 ] && [ -n "$IP_JSON" ]; then
          echo "Raw trace output:"
          echo "$IP_JSON"
          IP=$(echo "$IP_JSON" | grep 'ip=' | cut -d= -f2)
          echo "✅ Proxy test OK — external IP via proxy: $IP"
        else
          echo "::error::Proxy test failed — check logs"
          echo "--- Full microsocks log ---"
          cat "${{ env.MICRO_LOG }}"
          echo "--- Full cloudflared log ---"
          cat "${{ env.TUNNEL_LOG }}"
          exit 1
        fi
        
    - name: Tunnel is running
      shell: bash
      run: |
        echo "The tunnel and proxy are now running in the background."
        echo "Add subsequent steps to this job to use them."
        # For example, to keep the job alive for 10 minutes:
        # sleep 600




